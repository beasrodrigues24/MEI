<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//No. of planes 
const int N = 4;

//Generate plane ids
typedef int [0, N-1] planeID;

// Used for indexes in appr matrix
const int TAKEOFF = 0;
const int LAND = 1;

// Generates channels
chan wait[N], gone, appr[2][N];
urgent chan go[N];
</declaration>
	<template>
		<name x="5" y="5">Plane</name>
		<parameter>const planeID id</parameter>
		<declaration>// Internal clock
clock x;
// Action, can be TAKEOFF or LAND
int[0,1] action;</declaration>
		<location id="id0" x="-943" y="-93">
			<name x="-968" y="-127">Parked</name>
		</location>
		<location id="id1" x="-654" y="-93">
			<name x="-679" y="-127">Approaching</name>
			<label kind="invariant" x="-664" y="-76">x&lt;=5</label>
		</location>
		<location id="id2" x="569" y="-93">
			<name x="559" y="-127">Flying</name>
			<label kind="invariant" x="559" y="-76">x &lt;= 7</label>
		</location>
		<location id="id3" x="136" y="-93">
			<name x="100" y="-136">FieldTakeOff</name>
			<label kind="invariant" x="126" y="-76">x &lt;= 3</label>
		</location>
		<location id="id4" x="-119" y="-331">
			<name x="-111" y="-365">FieldLanding</name>
			<label kind="invariant" x="-129" y="-314">x &lt;= 6</label>
		</location>
		<location id="id5" x="-654" y="85">
			<name x="-664" y="51">Waiting</name>
		</location>
		<location id="id6" x="-119" y="-93">
			<name x="-129" y="-127">Split</name>
			<committed/>
		</location>
		<location id="id7" x="-408" y="-93">
			<name x="-418" y="-127">IDLE</name>
			<label kind="invariant" x="-418" y="-76">x &lt;= 5</label>
		</location>
		<location id="id8" x="-119" y="85">
			<name x="-138" y="51">Retry</name>
			<label kind="invariant" x="-145" y="102">x &lt;= 7</label>
		</location>
		<init ref="id0"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-110" y="-8">x &gt;= 5</label>
			<label kind="assignment" x="-110" y="8">x := 0</label>
		</transition>
		<transition id="id10">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-425" y="59">go[id]?</label>
			<label kind="assignment" x="-425" y="85">x := 0</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-246" y="-110">x &gt;= 5</label>
			<label kind="assignment" x="-246" y="-93">x := 0</label>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-59" y="-119">action == TAKEOFF</label>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-110" y="-229">action == LAND</label>
		</transition>
		<transition id="id14">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-518" y="-374">x &gt;= 4</label>
			<label kind="synchronisation" x="-518" y="-357">gone!</label>
			<label kind="assignment" x="-518" y="-331">x:=0</label>
			<nail x="-943" y="-331"/>
		</transition>
		<transition id="id15">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="357" y="-144">x&gt;=1</label>
			<label kind="synchronisation" x="357" y="-118">gone!</label>
			<label kind="assignment" x="357" y="-93">x:=0</label>
		</transition>
		<transition id="id16">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-197" y="161">x &gt;= 5</label>
			<label kind="synchronisation" x="-197" y="178">appr[LAND][id]!</label>
			<label kind="assignment" x="-187" y="204">x := 0,
action:=LAND</label>
			<nail x="569" y="204"/>
			<nail x="-756" y="204"/>
		</transition>
		<transition id="id17">
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="guard" x="-544" y="-119">x &gt;= 5</label>
			<label kind="assignment" x="-535" y="-93">x:=0</label>
		</transition>
		<transition id="id18">
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-646" y="-34">x &lt;= 5</label>
			<label kind="synchronisation" x="-646" y="-17">wait[id]?</label>
			<label kind="assignment" x="-646" y="0">x:=0</label>
		</transition>
		<transition id="id19">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-867" y="-119">appr[TAKEOFF][id]!</label>
			<label kind="assignment" x="-850" y="-93">x:=0,
action:=TAKEOFF</label>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<declaration>// Current plane being handled
planeID current;
// Represents the state of the field as busy or not
bool busy = false;
// List that represents a N sized queue (at most), with planes interested in using the field
planeID queue[N];
// Queue size
int[0,N] len = 0;
// Returns if the field is free
bool fieldIsFree() {
    return busy == false;
}
// Adds a planeID to the queue
void enqueue(planeID id) {
    queue[len++] = id;
}
// Removes a plane from the queue
void dequeue() {
     int i = 0;
     len -= 1;
     while (i &lt; len)
     {
         queue[i] = queue[i + 1];
         i++;
     }
}
// Returns if the queue is empty
bool isEmpty() {
    return len == 0;
}
// Returns the plane that has the next turn
planeID front() {
    return queue[0];
}</declaration>
		<location id="id20" x="-765" y="-425">
			<name x="-775" y="-459">IDLE</name>
		</location>
		<location id="id21" x="-765" y="-161">
			<name x="-775" y="-195">Evaluating</name>
			<committed/>
		</location>
		<init ref="id20"/>
		<transition id="id22">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="-756" y="-374">e : planeID, 
t : int[0,1]</label>
			<label kind="guard" x="-756" y="-331">!fieldIsFree() || isEmpty()</label>
			<label kind="synchronisation" x="-756" y="-306">appr[t][e]?</label>
			<label kind="assignment" x="-756" y="-280">current := e</label>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="guard" x="-688" y="-620">fieldIsFree() &amp;&amp; !isEmpty()</label>
			<label kind="synchronisation" x="-689" y="-603">go[front()]!</label>
			<label kind="assignment" x="-688" y="-578">busy := true,
dequeue()</label>
			<nail x="-714" y="-578"/>
			<nail x="-544" y="-578"/>
		</transition>
		<transition id="id24">
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-943" y="-603">gone?</label>
			<label kind="assignment" x="-960" y="-578">busy := false</label>
			<nail x="-851" y="-578"/>
			<nail x="-987" y="-578"/>
		</transition>
		<transition id="id25">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-1037" y="-187">fieldIsFree() &amp;&amp; isEmpty()</label>
			<label kind="assignment" x="-977" y="-161">busy := true</label>
			<nail x="-1096" y="-161"/>
			<nail x="-1096" y="-425"/>
		</transition>
		<transition id="id26">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-629" y="-204">!fieldIsFree() || !isEmpty()</label>
			<label kind="synchronisation" x="-629" y="-187">wait[current]!</label>
			<label kind="assignment" x="-628" y="-161">enqueue(current)</label>
			<nail x="-382" y="-161"/>
			<nail x="-382" y="-425"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Plane, Controller;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>No deadlocks allowed.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 18:11:17 +0100">
			</result>
		</query>
		<query>
			<formula>A[] Controller.len &lt; N</formula>
			<comment>There can never be N planes in the queue.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:01:48 +0100">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Plane(1).Flying</formula>
			<comment>Eventually, plane 1 flies.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 18:37:25 +0100">
			</result>
		</query>
		<query>
			<formula>A[] forall (i:planeID) forall (j:planeID) (Plane(i).FieldLanding || Plane(i).FieldTakeOff) &amp;&amp; (Plane(j).FieldLanding || Plane(j).FieldTakeOff) imply i == j</formula>
			<comment>The field can only be accessed by one plane at a time.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:09:08 +0100">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (Plane(1).FieldTakeOff || Plane(1).FieldLanding) &amp;&amp; forall (i:planeID) i != 1 imply Plane(i).Waiting</formula>
			<comment>There will be a state where plane 1 is using the field and all other planes will be waiting for their turn.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:18:25 +0100">
			</result>
		</query>
		<query>
			<formula>Plane(1).Waiting --&gt; (Plane(1).Flying || Plane(1).Parked)</formula>
			<comment>If plane 1 is waiting, its turn will eventually arrive.</comment>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:21:16 +0100">
			</result>
		</query>
		<query>
			<formula>E[] Plane(1).Parked</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:25:15 +0100">
			</result>
		</query>
		<query>
			<formula>Plane(1).Flying --&gt; Plane(1).Approaching</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-25 19:28:14 +0100">
			</result>
		</query>
	</queries>
</nta>
